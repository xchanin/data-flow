declare type ModuleType = 'Home' | 'Other';
export declare class DrawFlowTestModel {
    module: string;
    data: any;
    constructor(m: string, d: any);
}
export default class FlowToolOriginal {
    events: any;
    container: HTMLElement;
    precanvas: HTMLElement;
    nodeId: number;
    ele_selected: any;
    node_selected: any;
    drag: any;
    reroute: any;
    reroute_fix_curvature: any;
    curvature: any;
    reroute_curvature_start_end: any;
    reroute_curvature: any;
    reroute_width: any;
    drag_point: any;
    editor_selected: any;
    connection: any;
    connection_ele: any;
    connection_selected: any;
    canvas_x: any;
    canvas_y: any;
    pos_x: any;
    pos_x_start: any;
    pos_y: any;
    pos_y_start: any;
    mouse_x: any;
    mouse_y: any;
    line_path: any;
    first_click: any;
    force_first_input: any;
    draggable_inputs: any;
    useuuid: any;
    parent: any;
    noderegister: any;
    render: any;
    DrawFlow: DrawFlowTestModel;
    drawflow: {
        drawflow: {
            Home: {
                data: {};
            };
        };
    };
    module: ModuleType;
    editor_mode: string;
    zoom: number;
    zoom_max: number;
    zoom_min: number;
    zoom_value: number;
    zoom_last_value: number;
    evCache: any[];
    prevDiff: number;
    constructor(container: HTMLElement, render?: null, parent?: null);
    start(): void;
    pointerdown_handler(ev: any): void;
    pointermove_handler(ev: any): void;
    pointerup_handler(ev: any): void;
    remove_event(ev: any): void;
    load(): void;
    removeReouteConnectionSelected(): void;
    click(e: any): false | undefined;
    position(e: any): void;
    dragEnd(e: any): void;
    contextmenu(e: any): false | undefined;
    contextmenuDel(): void;
    key(e: any): false | undefined;
    zoom_enter(event: any, delta: any): void;
    zoom_refresh(): void;
    zoom_in(): void;
    zoom_out(): void;
    zoom_reset(): void;
    createCurvature(start_pos_x: any, start_pos_y: any, end_pos_x: any, end_pos_y: any, curvature_value: any, type: any): string;
    drawConnection(ele: any): void;
    updateConnection(eX: any, eY: any): void;
    addConnection(id_output: any, id_input: any, output_class: any, input_class: any): void;
    updateConnectionNodes(id: any): void;
    dblclick(e: any): void;
    createReroutePoint(ele: any): void;
    removeReroutePoint(ele: any): void;
    registerNode(name: any, html: any, props?: null, options?: null): void;
    getNodeFromId(id: any): any;
    getNodesFromName(name: any): any[];
    addNode(name: any, num_in: any, num_out: any, ele_pos_x: any, ele_pos_y: any, classoverride: any, data: any, html: any, typenode?: boolean): any;
    addNodeImport(dataNode: any, precanvas: any): void;
    addRerouteImport(dataNode: any): void;
    updateNodeValue(event: any): void;
    updateNodeDataFromId(id: any, data: any): void;
    addNodeInput(id: any): void;
    addNodeOutput(id: any): void;
    removeNodeInput(id: any, input_class: any): void;
    removeNodeOutput(id: any, output_class: any): void;
    removeNodeId(id: any): void;
    removeConnection(): void;
    removeSingleConnection(id_output: any, id_input: any, output_class: any, input_class: any): boolean;
    removeConnectionNodeId(id: any): void;
    getModuleFromNodeId(id: any): undefined;
    addModule(name: any): void;
    changeModule(name: any): void;
    removeModule(name: any): void;
    clearModuleSelected(): void;
    clear(): void;
    export(): any;
    import(data: any, notifi?: boolean): void;
    on(event: any, callback: any): false | undefined;
    removeListener(event: any, callback: any): false | undefined;
    dispatch(event: any, details: any): false | undefined;
    getUuid(): string;
}
export {};
